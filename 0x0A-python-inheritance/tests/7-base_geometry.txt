===========================
7-base_geometry module test
===========================

It uses integer_validator to check for value...

:::

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

	>>> bg = BaseGeometry()
	>>> bg.integer_validator("my_int", 12)
	
	>>> bg.integer_validator("width", 89)
	

	>>> try:
	...	 bg.integer_validator("name", "John")
	... except Exception as e:
	...	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer

	>>> try:
	...	bg.integer_validator("age", 0)
	... except Exception as e:
	...	print("[{}] {}".format(e.__class__.__name__, e))
	[ValueError] age must be greater than 0

	>>> bg.integer_validator((1, 7), 12)
	Traceback (most recent call last):
		...
	TypeError: name must be a string

	>>> bg.integer_validator("", 12)
	Traceback (most recent call last):
		...
	TypeError: name must not be an empty string

	>>> bg.integer_validator(None, 12)
	Traceback (most recent call last):
		...
	TypeError: name must be a string

	>>> bg.integer_validator(True, 12)
	Traceback (most recent call last):
		...
	TypeError: name must be a string

	>>> bg.integer_validator("name", "John")
	Traceback (most recent call last):
		...
	TypeError: name must be an integer

	>>> bg.integer_validator("name", None)
	Traceback (most recent call last):
		...
	TypeError: name must be an integer

	>>> bg.integer_validator("name", True)
	Traceback (most recent call last):
		...
	TypeError: name must be an integer

	>>> bg.integer_validator("name", -100)
	Traceback (most recent call last):
		...
	ValueError: name must be greater than 0

	>>> bg.integer_validator("name", 0)
	Traceback (most recent call last):
		...
	ValueError: name must be greater than 0
